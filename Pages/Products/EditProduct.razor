@page "/editproduct/{productId:int}"
@page "/editproduct/"
@inject IProductServices productServices
@inject ICategoryServices categoryServices
@inject NavigationManager NavigationManager

<PageTitle>Edit Product</PageTitle>

<ModuleTitle Title="Edit Product" />

<button class="btn btn-dark" @onclick="@(()=> NavigationManager.NavigateTo("/products"))">Go Back To Products</button>

@if (product == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm Model="@product" OnSubmit="@Save">
        <div class="row">
            <div class="col-8 form-group">
                <label for="title" class="col-form-label">Title</label>
                <InputText id="title" @bind-Value="product.title" required class="form-control" />
            </div>
            <div class="col form-group">
                <label for="price" class="col-form-label">Price</label>
                <InputNumber id="price" @bind-Value="product.price" min="0" required class="form-control" />
            </div>
        </div>


        <div class="row">
            <div class="col form-group">
                <label for="categoryId" class="col-form-label">category</label>
                <InputSelect id="categoryId" @bind-Value="product.categoryId" class="form-control">
                    <option>@product.category.name</option>
                    @foreach (var item in categories)
                    {
                        <option value="@item.id">@item.name</option>
                    }
                </InputSelect>
            </div>
            <div class="col form-group">
                <label for="images" class="col-form-label">Images (Url)</label>
                <InputText id="image" @bind-Value="product.imagesText" required class="form-control" />

            </div>
        </div>


        <div class="form-group">
            <label for="description" class="col-form-label">Description</label>
            <InputTextArea id="description" @bind-Value="product.description" required class="form-control">
            </InputTextArea>
        </div>

        <hr />
        <button class="btn btn-primary" type="submit">Save</button>
    </EditForm>

}

@code {
    [Parameter]
    public int productId { get; set; }
    private Product product;
    private List<Category> categories = new List<Category>();



    protected override async Task OnInitializedAsync()
    {
        product = await GetProduct(productId);
        product.imagesText = product.images[0];
        product.categoryId = product.category.id;
        categories = await categoryServices.Get();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        // Realiza las operaciones necesarias con el ProductId
        Console.WriteLine($"ProductId: {productId}");
    }

    private async Task<Product> GetProduct(int productId)
    {
        return await productServices.GetById(productId);
    }

    private async Task Save()
    {
        var id = product.id;
        product.category = categories.FirstOrDefault(c => c.id == product.categoryId);
        product.images = new string[] { product.imagesText };
        await productServices.Add(product);
        NavigationManager.NavigateTo("/products");
    }

}