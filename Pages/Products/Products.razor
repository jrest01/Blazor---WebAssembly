@page "/products"
@inject ILogger<Products> logger;
@inject IProductServices productsService;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Products</PageTitle>

<ModuleTitle Title="Products" />
@if (Visible == true)
{
    @if (products?.Count > 0)
    {
        <button class="btn btn-dark" @onclick="@(()=> NavigationManager.NavigateTo("/addproduct"))">Add Product</button>

        <div class="container mt-5">
            <div class="row">
                @foreach (var product in products)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card">
                            <div class="card">
                                <img src="@product.images[0]" class="card-img-top" alt="@product.title">
                                <div class="card-body">
                                    <h5 class="card-title">@product.title</h5>
                                    <p class="card-text">@product.description</p>
                                    <p class="card-text"><strong>Precio:</strong> @product.price.ToString("C")</p>
                                    <button title="delete" class="btn btn-danger btn-delete"
                                        onclick="@(() => DeleteProduct(product))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                            class="bi bi-trash" viewBox="0 0 16 16">
                                            <path
                                                d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z" />
                                            <path
                                                d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z" />
                                        </svg>
                                    </button>
                                    <button title="edit" class="btn btn-warning btn-warning"
                                        @onclick="@(()=> NavigationManager.NavigateTo($"/editproduct/{product.id}"))">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                            class="bi bi-pencil" viewBox="0 0 16 16">
                                            <path
                                                d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>


                }
            </div>
        </div>


    }
}
else
{
    <p>No hay productos para mostrar</p>
}

@code {
    private List<Product>? products;
    private bool Visible { get; set; }

    protected override async void OnInitialized()
    {
        Visible = true;
        products = await GetProducts();
        Visible = true;
        StateHasChanged();
    }

    private async Task<List<Product>> GetProducts()
    {
        return await productsService.Get();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure to remove {product.title}="))
            return;
        await productsService.Delete(product.id);
        products = await GetProducts();
        InvokeAsync(StateHasChanged);
    }

}
